package jsoft.gui.article;

import java.sql.*;
import java.util.*;
import java.util.stream.Collector;
import java.util.stream.Collectors;

import org.javatuples.*;
import jsoft.objects.*;
import jsoft.*;

public class ArticleModel {

	private Article a;
	
	private ArrayList<ArrayList<ArticleOject>> items;
	private ArrayList<Pair<CategoryObject, Integer>> cates;
	private HashMap<String, Integer> tags;
	private Triplet<Integer, Short, Byte> pagings;
	private ArticleOject item;
	
	public ArticleModel(ConnectionPool cp, Quartet<ArticleOject, Short, Byte, VIEW> infos)
	{
		this.a = new ArticleImpl(cp);
		this.items = new ArrayList<>();
		this.cates = new ArrayList<>();
		this.tags = new HashMap<>();
		this.getArticleObject(infos);
	}
	
	public ConnectionPool getCP()
	{
		return this.a.getCP();
	}
	
	public void releaseConnection()
	{
		this.a.releaseConnection();
	}
	
	//--------------------------------------------
	public ArrayList<ArrayList<ArticleOject>> getAllArticleObjects(){
		return this.items;
	}
	public ArrayList<Pair<CategoryObject, Integer>> getCates_Totals(){
		return this.cates;
	}
	
	public HashMap<String, Integer> getTags_Counts(){
		return this.tags;
	}
	
	public Triplet<Integer, Short, Byte> getPagingInfos(){
		return this.pagings;
	}
	//--------------------------------------------
	
	public void getArticle(ResultSet rs) {
		// TODO Auto-generated method stub
		
		ArticleOject item = null;
		
		ResultSet rs = this.a.getArticle(id);
		
		if(rs!=null) {
			try {
				if(rs.next()) {
					item = new ArticleOject();
					item.setArticle_id(rs.getInt("article_id"));
					item.setArticle_title(rs.getString("article_title"));
					item.setArticle_summary(rs.getString("article_summary"));
					item.setArticle_content(rs.getString("article_content"));
					item.setArticle_created_date(rs.getString("article_created_date"));
					item.setArticle_last_modified(rs.getString("article_last_modified"));
					item.setArticle_image(rs.getString("article_image"));
					item.setArticle_category_id(rs.getShort("article_category_id"));
					item.setArticle_section_id(rs.getShort("article_section_id"));
					//item.setArticle_visited(rs.getShort("article_visited"));
					item.setArticle_author_name(rs.getString("article_author_name"));
					//item.setArticle_url_link(rs.getString("article_url_link"));		
					item.setCategory_name(rs.getString("category_name"));
					item.setSection_name(rs.getString("section_name"));					
					item.setArticle_tag(rs.getString("article_tag"));
					

				}
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
		}
		
		return null;
	}
	
	private ArrayList<ArticleOject> toArrayList(ResultSet rs){
		ArrayList<ArticleOject> items = new ArrayList<>();
		ArticleOject item = null;
		
		if(rs!=null) {
			try
			{
				while(rs.next()) {
					item = new ArticleOject();
					item.setArticle_id(rs.getInt("article_id"));
					item.setArticle_title(rs.getString("article_title"));
					item.setArticle_summary(rs.getString("article_summary"));
					//item.setArticle_content(rs.getString("article_content"));
					item.setArticle_created_date(rs.getString("article_created_date"));
					item.setArticle_last_modified(rs.getString("article_last_modified"));
					item.setArticle_image(rs.getString("article_image"));
					item.setArticle_category_id(rs.getShort("article_category_id"));
					item.setArticle_section_id(rs.getShort("article_section_id"));
					//item.setArticle_visited(rs.getShort("article_visited"));
					item.setArticle_author_name(rs.getString("article_author_name"));
					//item.setArticle_url_link(rs.getString("article_url_link"));
					item.setCategory_name(rs.getString("category_name"));
					item.setSection_name(rs.getString("section_name"));					
					item.setArticle_tag(rs.getString("article_tag"));
									
					items.add(item);
				}
				rs.close();
			}catch (Exception e) {
				// TODO: handle exception
				e.printStackTrace();
			}
		}
		
		return items;
	}
	
	private void getArticleObject(
			Quartet<ArticleOject, Short, Byte, VIEW> infos)
	{
		VIEW v = infos.getValue3();
		
		//Danh sách bài viết mới
		ArrayList<ArticleOject> newest_items = new ArrayList<>();
		//Danh sách bài viết theo xu hướng
		ArrayList<ArticleOject> trend_items = new ArrayList<>();
		//HÌnh ảnh dự án
		ArrayList<ArticleOject> image_items = new ArrayList<>();
		//Dịch vụ dự án
		ArrayList<ArticleOject> service_items = new ArrayList<>();
		//Danh sách bài viết mới theo chuyên mục
		ArrayList<ArticleOject> news_items = new ArrayList<>();
		
		
		ArticleOject item = null;
		
		ArrayList<ResultSet> res = this.a.getArticles(infos);
		
		if(res!=null && res.size()>0) {
			
			ResultSet rs = res.get(0);
			newest_items = this.toArrayList(rs);
			
			rs = res.get(1); // Danh sách bài viết xem nhiều (xu hướng)
			trend_items = this.toArrayList(rs);
				
			if(v==VIEW.HOMEPAGE) {
				rs = res.get(2); // Hinh anh du an
				image_items = this.toArrayList(rs);
				
				rs = res.get(3); // Dich vu du an
				service_items = this.toArrayList(rs);
			}else {
				rs = res.get(2); // Tin tức mới trong chuyên mục
				news_items = this.toArrayList(rs);
				
				rs = res.get(3); // Danh sách thể loại cùng số lượng bài viết
				if(rs != null) {
					Pair<CategoryObject, Integer> cate_total = null;
					CategoryObject c = null;
					try {
						while(rs.next()) {
							c = new CategoryObject();
							c.setCategory_id(rs.getShort("category_id"));
							c.setCategory_name(rs.getString("category_name"));
							
							cate_total = new Pair<>(c, rs.getInt("total"));
							
							this.cates.add(cate_total);
						}
						rs.close();
					} catch (SQLException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				}
				
				rs = res.get(4);// Danh sách từ khóa (Tags)
				if(rs!=null) {
					try {
						
						StringBuilder allTags = new StringBuilder("");
						
						while(rs.next()) {
							allTags.append(rs.getString("article_tag"));
						}
						rs.close();
						this.getStatisticTags(allTags.toString());
					} catch (SQLException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				}
				
				//Tổng số bài viết để phân trang hoặc bài viết chi tiết để xem chi tiết
				rs = res.get(5);
				int total = 0;
				if(rs!=null) {
					try {
						if(rs.next()) {
							total = rs.getInt("total");
						}
						rs.close();
					} catch (SQLException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				}
				
				this.pagings = new Triplet<>(total, infos.getValue1(), infos.getValue2());
				
			}
			
		}
		
		
		//Danh sach cac danh sách thành phần
		this.items.add(newest_items);
		this.items.add(trend_items);
		if(v==VIEW.HOMEPAGE) {
			this.items.add(image_items);
			this.items.add(service_items);
		}else {
			this.items.add(news_items);
			
		}
	}
	
	private void getStatisticTags(String allTags){
		if(!allTags.equalsIgnoreCase("")) {
			allTags = allTags.toLowerCase();
			
			while(allTags.indexOf("  ")!=-1) {
				allTags = allTags.replace("  ", " "); //Loại bỏ dấu cách thừa
			}
			
			String[] tags = allTags.split(",");
			
			for(String tag: tags) {
				if(!tag.equalsIgnoreCase("")) {
					tag = tag.trim();
					
					if(this.tags.containsKey(tag)) {
						this.tags.replace(tag, this.tags.get(tag)+1);
					}else {
						this.tags.put(tag, 1);
					}
					
				}
			}
			
			//Lọc theo số lượng
			this.tags.keySet().removeAll(this.tags.entrySet().stream()
					.filter(a -> a.getValue().intValue()<3)
					.map(e -> e.getKey())
					.collect(Collectors.toList()));
			
		}
	}
	
}
