package jsoft.ads.category;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;

import org.javatuples.Pair;
import org.javatuples.Quartet;
import org.javatuples.Triplet;

import jsoft.ConnectionPool;
import jsoft.ads.basic.BasicImpl;
import jsoft.ads.section.SECTION_SORT;
import jsoft.library.ORDER;
import jsoft.objects.CategoryObject;
import jsoft.objects.SectionObject;
import jsoft.objects.UserObject;

public class CategoryImpl extends BasicImpl implements Category{

	public CategoryImpl(ConnectionPool cp) {
		super(cp, "Category");
		// TODO Auto-generated constructor stub
	}

	@Override
	public boolean addCategory(CategoryObject item) {
		// TODO Auto-generated method stub
		StringBuilder sql = new StringBuilder();
		sql.append("INSERT INTO tblcategory( ");
		sql.append("category_name, category_section_id, category_notes, category_created_date, ");
		sql.append("category_created_author_id, category_last_modified, category_manager_id, category_enable, ");
		sql.append("category_delete, category_image, category_name_en, category_language ");
		sql.append(") ");
		sql.append(" VALUES(?,?,?,?,?,?,?,?,?,?,?,?)");
		
		// biên dịch
		try {
			PreparedStatement pre = this.con.prepareStatement(sql.toString());
			pre.setString(1, item.getCategory_name());
			pre.setInt(2, item.getCategory_section_id());
			pre.setString(3, item.getCategory_notes());
			pre.setString(4, item.getCategory_created_date());
			pre.setInt(5, item.getCategory_created_author_id());
			pre.setString(6, item.getCategory_last_modified());
			pre.setInt(7, item.getCategory_manager_id());
			pre.setBoolean(8, item.isCategory_enable());
			pre.setBoolean(9, item.isCategory_delete());
			pre.setString(10, item.getCategory_image());
			pre.setString(11, item.getCategory_name_en());
			pre.setInt(12, item.getCategory_language());
			return this.add(pre);
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			try {
				this.con.rollback();
			} catch (SQLException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
		}
		return false;
	}

	@Override
	public boolean editCategory(CategoryObject item) {
		// TODO Auto-generated method stub
		StringBuilder sql = new StringBuilder(); 
		sql.append("UPDATE tblcategory SET ");
		sql.append("category_name=?, category_section_id=?, category_notes=?, ");
		sql.append("category_last_modified=?, category_manager_id=?, category_enable=?, ");
		sql.append("category_image=?, category_name_en=?, category_language=?");
		sql.append("WHERE category_id=?");
		
		// bien dich
		try {
			PreparedStatement pre = this.con.prepareStatement(sql.toString());
			pre.setString(1, item.getCategory_name());
			pre.setInt(2, item.getCategory_section_id());
			pre.setString(3, item.getCategory_notes());
			pre.setString(4, item.getCategory_last_modified());
			pre.setInt(5, item.getCategory_manager_id());
			pre.setBoolean(6, item.isCategory_enable());
			pre.setString(7, item.getCategory_image());
			pre.setString(8, item.getCategory_name_en());
			pre.setInt(9, item.getCategory_language());
			pre.setInt(10, item.getCategory_id());
			return this.edit(pre); 
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			try {
				this.con.rollback();
			} catch (SQLException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
		}
		
		return false;
	}

	@Override
	public boolean delCategory(CategoryObject item) {
		// TODO Auto-generated method stub
		if(!this.isEmpty(item)) {
			return false; 
		}
		
		StringBuilder sql = new StringBuilder(); 
		sql.append("DELECT FROM tblcategory WHERE category_id=?"); 
		try {
			PreparedStatement pre = this.con.prepareStatement(sql.toString());
			pre.setInt(1, item.getCategory_id());
			return this.del(pre); 
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			try {
				this.con.rollback();
			} catch (SQLException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
		} 
		
		return false;
	}
	
	private boolean isEmpty(CategoryObject item) {
		boolean flag = true; 
		StringBuilder sql = new StringBuilder(); 
		sql.append("");
		
		ArrayList<ResultSet> res = this.getsMR(sql.toString()); 
		for (ResultSet rs : res) {
			if(rs != null) {
				try {
					if(rs.next()) {
						flag= false; 
						break; 
					}
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		}
		return flag; 
	}

	@Override
	public ResultSet getCategory(short id, UserObject user) {
		// TODO Auto-generated method stub
		
		StringBuilder sql = new StringBuilder(); 
		sql.append("SELECT * FROM tblcategory AS c");
		sql.append("LEFT JOIN tblsection AS s ON c.category_section_id=s.section_id ");
		sql.append("WHERE (c.category_id=?) AND ((c.category_created_author_id="+user.getUser_id()+")OR(c.category_manager_id="+user.getUser_id()+"))");
		
		return this.get(sql.toString(), id);
	}

//	@Override
//	public ArrayList<ResultSet> getCategories(Triplet<CategoryObject, Integer, Byte> infos,
//			Pair<CATEGORY_SORT, ORDER> so) {
//		// TODO Auto-generated method stub
//		// đối tượng lưu trữ thông tin lọc kết quả
//				CategoryObject similer = infos.getValue0();//similer: tương tự 
//
//				// vị trí bắt đầu lấy bản ghi
//				int at = infos.getValue1();
//
//				// số bản ghi được lấy trong một lần
//				byte totalperpage = infos.getValue2();
//
//				StringBuilder sql= new StringBuilder();
//				//tổng số bản ghi 
//				sql.append("SELECT COUNT(category_id) AS totalparpage FROM tblcategory;");
//				
//				// câu lệnh truy vấn 
//				sql.append("SELECT * FROM tblcategory AS c ");
//				sql.append("LEFT JOIN tblsection s ON c.category_section_id=s.section_id ");
//				sql.append("LEFT JOIN tbluser AS u ON c.category_manager_id=u.user_id ");
//				sql.append("");
//				switch(so.getValue0()) {
//				case NAME:
//					sql.append("ORDER BY c.category_name ").append(so.getValue1().name());
//					break;
//				case MANAGER:
//					sql.append("ORDER BY c.category_manager_id").append(so.getValue1().name());
//					break;
//				default:
//					sql.append("ORDER BY c.category_id DESC ");
//				}
//				sql.append(" LIMIT "+at+ ", "+ totalperpage +"; ");
//
//				return this.getsMR(sql.toString());
//	}
	@Override
	public ArrayList<ResultSet> getCategories(Quartet<CategoryObject, Integer, Byte, CATEGORY_SORT> infos) {
		// TODO Auto-generated method stub
				CategoryObject similar = infos.getValue0();
				
				int at = infos.getValue1();
				
				byte totalperpage = infos.getValue2();
				
				StringBuilder sql = new StringBuilder();
				//tổng số bản ghi 
				sql.append("SELECT COUNT(category_id) AS totalparpage FROM tblcategory;");
				
				// câu lệnh truy vấn 
				sql.append("SELECT * FROM tblcategory AS c ");
				sql.append("LEFT JOIN tblsection s ON c.category_section_id=s.section_id ");
				sql.append("LEFT JOIN tbluser AS u ON c.category_manager_id=u.user_id ");
				sql.append("");
				switch(infos.getValue3()) {
				case NAME:
					sql.append("ORDER BY c.category_name ");
					break;
				case MANAGER:
					sql.append("ORDER BY c.category_manager_id");
					break;
				default:
					sql.append("ORDER BY c.category_id DESC ");
				}
				
				sql.append(" LIMIT "+at+ ", "+ totalperpage +"; ");
				
				return this.getsMR(sql.toString());
	}

}
